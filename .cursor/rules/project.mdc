---
description: Rules and context for this project
globs:
alwaysApply: true
---

# Iron rules
- Always use Context7
- Always run tests after edits
- Never remove tests
- Always explain you thoughts, step-by-step, before suggesting edits
- Ask us first when you need to make edits in unopened files
- Ask us very explicitly that you are installing new tools
- Keep changes localized and minimum
- Keep variable names short, DO NOT name something like fooDataUpdaterAdapter
- If your decisions used reference to links from forums or documentations, give us the URLs (without previewing it)

# About this project
line-fact-check is an free and open source software app for submitting and flagging fake news, especially Thai news.
Our developers are volunteers, and come from across Thailand.

It is a monorepo, and each directory at root can be treated as separate projects.
For example, [factcheck](/factcheck/) is Go monolith HTTP API server, while [backoffice-webapp](/backoffice-webapp/) is the web frontend.

# Nix use
The monorepo is also a Nix flake. This is done to ensure stuff builds at all times.

While Nix flake is fully embraced on CICD pipelines, although some of our devs might not want to install Nix. This is why we need to provide a way for our devs to interact with our Nix flake unless we want to maintain multiple version of Dockerfiles for the same program (one for Nix dev, another for non-Nix), which we will not do.

Because we can assume our devs do not have Nix installed, you cannot by default suggest that they run Nix commands. 

If we really need Nix to debug anything in chat session, use `docker run -it` instead. Say you need:

```sh
nix build .#foo
```

You can wrap the Nix command inside `docker run -it nixos/nix`:

```sh
docker run -it nixos/nix nix build .#foo
```

# CICD
The Git repository is hosted on GitHub and we use GitHub Actions for CICD.
We try to use Nix everywhere when we could, for example, in [.github/workflows/release.yaml](/.github/workflows/release.yaml)

# Jargons (in code and chat)
- A Go integration test is called "it-test", and Go integration tests end with `_it_test.go` and tag `integration_test`.

# Business logic
## Business users
As a fact-checker platform, we have 2 types of "users"

- Users
Users can access our app via chat apps like LINE or other entrypoints, and the web portal.
They can submit their messages any time on any entrypoints, and this will be reflected in
the user_message metadata that records the whole submission.

- Admins
Admins access our app via web portal and are the "human verifiers" of our system.
Admin creates "topics", reviews and approves "topic-message assignment", as well as resolve topics with result.

## Business flow
As a fact-checker platform, our business logic can be classified into 3 steps:

1. "Users" post/submit some news or statement into our system
    This action has side effects on 2 of our entites:
    - user_messages:
        An "event log" recording the user interaction (submission)

    - messages
        News or statements that user wishes to fact-check.

    The users can choose if they want to include some existing topic ID
    right when they submit, or leave it up to the admin for topic assignment.

2. "Admins" review user submissions
    This is when admins come in and validate user message submissions.
    If the submissions are spams, admins can delete/ignore these new messages.

    Until the admin "approves" the submission, no other users will see the message.

3. "Admins" assign topic to new message submissions
    After approval, admins will assign the message submission to a topic,
    or create a new topic just for this message.

4. "Admins" resolve topic
    Admins can check and verify fake news, and save their findings as "topic result".
    This result consists of a result status (resolve, pending, revoked, or something else)
    and result findings - human language statements that support their verification.
