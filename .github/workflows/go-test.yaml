name: test go
on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  test:
    name: Test code
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest

        go-version:
          - stable
          - "" # empty string = read version from go.mod

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    env:
      ARTIFACT_FACTCHECK: "factcheck-test_result-go${{ matrix.go-version }}_${{ matrix.os }}.json"
      ARTIFACT_FOO: "foo-test_result-go${{ matrix.go-version }}_${{ matrix.os }}.json"
      ARTIFACT_FACTCHECK_IT: "factcheck-it-test_result-go${{ matrix.go-version }}_${{ matrix.os }}.json"
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: "0"

      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Check code generation in factcheck
        run: |
          nix develop --command bash -c "
            cd factcheck
            echo 'Generating wire code for factcheck...'
            wire ./...
            echo 'Wire generation complete'
            
            echo 'Checking for wire-generated code differences...'
            cd ..
            if [ -n \"$(git status --porcelain)\" ]; then
              echo 'Error: Generated code differs from repository state'
              git diff
              exit 1
            else
              echo 'Generated code matches repository state'
            fi

            cd factcheck
            echo 'Generating sqlc code for factcheck...'
            sqlc generate
            echo 'SQLC generation complete'
            echo 'Checking for sqlc-generated code differences...'
            cd ..
            if [ -n \"$(git status --porcelain)\" ]; then
              echo 'Error: Generated code differs from repository state'
              git diff
              exit 1
            else
              echo 'Generated code matches repository state'
            fi
          "

      - name: Test factcheck
        run: |
          nix develop --command bash -c "
            cd factcheck
            echo 'PWD: $PWD'
            echo Testing factcheck and writing JSON report to $ARTIFACT_FACTCHECK
            go test -race -count=1 -json ./... | tee $ARTIFACT_FACTCHECK
          "

      - name: Test foo
        run: |
          nix develop --command bash -c "
            cd foo
            echo 'PWD: $PWD'
            echo 'Testing foo and writing JSON report to $ARTIFACT_FOO'
            go test -race -count=1 -json ./... | tee $ARTIFACT_FOO
          "

      - name: Test build with Docker
        run: |
          nix develop --command bash -c "
            nix build .#docker-postgres-it-test
            nix build .#docker-foo
            nix build .#version
          "

      - name: Test package with Docker
        if: matrix.os != 'macos-latest'
        run: |
          nix develop --command bash -c "
            nix build .#docker-foo
            # Test docker-foo image functionality
            echo "Loading docker-foo image..."
            docker load < result
            
            echo "Starting docker-foo container..."
            docker run -d --name foo-test -p 8080:8080 $(docker images --format "{{.Repository}}:{{.Tag}}" | grep foo | head -1)
            
            echo "Waiting for foo container to be ready..."
            sleep 5
            
            echo "Testing health endpoint..."
            curl -f http://localhost:8080/health || (echo "Health check failed" && docker logs foo-test && exit 1)

            echo "Cleaning up..."
            docker stop foo-test && docker rm foo-test
          "

      - name: Test package with Docker
        run: |
          nix develop --command bash -c "
            echo "Test build Docker image from Dockerfile"
            docker build -f ./Dockerfile.api
          "

      - name: Test factcheck (integration test)
        if: matrix.os != 'macos-latest'
        run: |
          nix develop .#shell-it-test --command bash -c "
            echo 'Waiting for PostgreSQL to be ready...'
            
            # Wait for PostgreSQL to be ready with timeout
            timeout=90
            counter=0
            while [ \$counter -lt \$timeout ]; do
              if docker exec postgres-it-test pg_isready -U postgres -d factcheck > /dev/null 2>&1; then
                echo 'PostgreSQL is ready!'
                break
              fi
              echo 'Waiting for PostgreSQL... (\$counter/\$timeout seconds)'
              sleep 2
              counter=\$((counter + 2))
            done
            
            if [ \$counter -ge \$timeout ]; then
              echo 'Error: PostgreSQL did not become ready within \$timeout seconds'
              docker logs postgres-it-test
              exit 1
            fi
            
            cd factcheck
            echo 'PWD: $PWD'
            echo 'Running integration tests for factcheck...'
            go test -tags=integration_test -p=1 -count=1 -race -json ./... | tee factcheck-it-test_result-go${{ matrix.go-version }}_${{ matrix.os }}.json
            
            echo 'Integration tests completed'
            docker stop postgres-it-test && docker rm postgres-it-test
          "

      - name: Upload Go test results
        uses: actions/upload-artifact@v4
        with:
          name: test_result-go${{ matrix.go-version }}_${{ matrix.os }}
          path: |
            factcheck/${{ env.ARTIFACT_FACTCHECK }}
            foo/${{ env.ARTIFACT_FOO }}
            factcheck/${{ env.ARTIFACT_FACTCHECK_IT }}
