name: test go
on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  test:
    name: Test code
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest

        go-version:
          - stable
          - "" # empty string = read version from go.mod

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    env:
      ARTIFACT_FACTCHECK: "factcheck-test_result-go${{ matrix.go-version }}_${{ matrix.os }}.json"
      ARTIFACT_FOO: "foo-test_result-go${{ matrix.go-version }}_${{ matrix.os }}.json"
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: "0"

      - name: Setup Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Check wire code generation
        run: |
          nix develop --command bash -c "
            echo 'Generating wire code for factcheck...'
            cd factcheck/cmd/api/di
            wire
            echo 'Wire generation complete'
            
            echo 'Checking for wire-generated code differences...'
            cd ../../../
            if [ -n \"$(git status --porcelain)\" ]; then
              echo 'Error: Generated code differs from repository state'
              git diff
              exit 1
            else
              echo 'Generated code matches repository state'
            fi
          "

      - name: Test factcheck
        run: |
          nix develop --command bash -c "
            cd factcheck
            echo 'PWD: $PWD'
            echo Testing factcheck and writing JSON report to $ARTIFACT_FACTCHECK
            go test -race -count=1 -json ./... > $ARTIFACT_FACTCHECK
          "

      - name: Test foo
        run: |
          nix develop --command bash -c "
            cd foo
            echo 'PWD: $PWD'
            echo 'Testing foo and writing JSON report to $ARTIFACT_FOO'
            go test -race -count=1 -json ./... > $ARTIFACT_FOO
          "

      - name: Start PostgreSQL for integration tests
        run: |
          nix build .#docker-postgres-integration-test
          docker load < result
          # Get the version tag and use it
          VERSION=$(nix eval .#docker-postgres-integration-test.tag --raw)
          echo "Using PostgreSQL Docker image version: $VERSION"
          docker run -d \
            --name postgres-integration-test \
            -p 5432:5432 \
            postgres-integration-test:$VERSION
          
          # Wait for PostgreSQL to be ready (90 seconds timeout)
          timeout 90 bash -c 'until docker exec postgres-integration-test pg_isready -U postgres; do sleep 1; done'

      - name: Test factcheck (integration tests)
        run: |
          nix develop --command bash -c "
            cd factcheck
            echo 'Running integration tests with PostgreSQL...'
            go test -race -count=1 -tags=integration_test -json ./... > integration_test_result.json
          "
        env:
          CI: ""  # Unset CI to allow integration tests to run

      - name: Cleanup PostgreSQL container
        if: always()
        run: |
          docker stop postgres-integration-test || true
          docker rm postgres-integration-test || true

      - name: Upload Go test results
        uses: actions/upload-artifact@v4
        with:
          name: test_result-go${{ matrix.go-version }}_${{ matrix.os }}
          path: |
            factcheck/${{ env.ARTIFACT_FACTCHECK }}
            factcheck/integration_test_result.json
            foo/${{ env.ARTIFACT_FOO }}
