// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for TopicResultStatus.
const (
	TOPICRESULTANSWERED   TopicResultStatus = "TOPIC_RESULT_ANSWERED"
	TOPICRESULTCHALLENGED TopicResultStatus = "TOPIC_RESULT_CHALLENGED"
	TOPICRESULTNONE       TopicResultStatus = "TOPIC_RESULT_NONE"
)

// Defines values for TopicStatus.
const (
	TOPICPENDING  TopicStatus = "TOPIC_PENDING"
	TOPICRESOLVED TopicStatus = "TOPIC_RESOLVED"
)

// CreateTopicRequest defines model for CreateTopicRequest.
type CreateTopicRequest struct {
	// Name Name/title of the topic to create
	Name string `json:"name"`
}

// Topic defines model for Topic.
type Topic struct {
	// CreatedAt When the topic was created
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for the topic
	Id openapi_types.UUID `json:"id"`

	// Name Name/title of the topic
	Name string `json:"name"`

	// Result Fact-checking result content
	Result *string `json:"result"`

	// ResultStatus Status of the fact-checking result
	ResultStatus *TopicResultStatus `json:"result_status"`

	// Status Current status of the topic
	Status TopicStatus `json:"status"`

	// UpdatedAt When the topic was last updated
	UpdatedAt *time.Time `json:"updated_at"`
}

// TopicResultStatus Status of the fact-checking result
type TopicResultStatus string

// TopicStatus Current status of the topic
type TopicStatus string

// CreateTopicJSONRequestBody defines body for CreateTopic for application/json ContentType.
type CreateTopicJSONRequestBody = CreateTopicRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all topics
	// (GET /topics)
	ListTopics(w http.ResponseWriter, r *http.Request)
	// Create a new topic
	// (POST /topics)
	CreateTopic(w http.ResponseWriter, r *http.Request)
	// Delete topic by ID
	// (DELETE /topics/{id})
	DeleteTopicByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get topic by ID
	// (GET /topics/{id})
	GetTopicByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all topics
// (GET /topics)
func (_ Unimplemented) ListTopics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new topic
// (POST /topics)
func (_ Unimplemented) CreateTopic(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete topic by ID
// (DELETE /topics/{id})
func (_ Unimplemented) DeleteTopicByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get topic by ID
// (GET /topics/{id})
func (_ Unimplemented) GetTopicByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListTopics operation middleware
func (siw *ServerInterfaceWrapper) ListTopics(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTopics(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTopic operation middleware
func (siw *ServerInterfaceWrapper) CreateTopic(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTopic(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTopicByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTopicByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTopicByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTopicByID operation middleware
func (siw *ServerInterfaceWrapper) GetTopicByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTopicByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/topics", wrapper.ListTopics)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/topics", wrapper.CreateTopic)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/topics/{id}", wrapper.DeleteTopicByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/topics/{id}", wrapper.GetTopicByID)
	})

	return r
}

type ListTopicsRequestObject struct {
}

type ListTopicsResponseObject interface {
	VisitListTopicsResponse(w http.ResponseWriter) error
}

type ListTopics200JSONResponse []Topic

func (response ListTopics200JSONResponse) VisitListTopicsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTopics500TextResponse string

func (response ListTopics500TextResponse) VisitListTopicsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type CreateTopicRequestObject struct {
	Body *CreateTopicJSONRequestBody
}

type CreateTopicResponseObject interface {
	VisitCreateTopicResponse(w http.ResponseWriter) error
}

type CreateTopic201JSONResponse Topic

func (response CreateTopic201JSONResponse) VisitCreateTopicResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTopic400TextResponse string

func (response CreateTopic400TextResponse) VisitCreateTopicResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type CreateTopic500TextResponse string

func (response CreateTopic500TextResponse) VisitCreateTopicResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteTopicByIDRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteTopicByIDResponseObject interface {
	VisitDeleteTopicByIDResponse(w http.ResponseWriter) error
}

type DeleteTopicByID200TextResponse string

func (response DeleteTopicByID200TextResponse) VisitDeleteTopicByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteTopicByID400TextResponse string

func (response DeleteTopicByID400TextResponse) VisitDeleteTopicByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type DeleteTopicByID500TextResponse string

func (response DeleteTopicByID500TextResponse) VisitDeleteTopicByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetTopicByIDRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetTopicByIDResponseObject interface {
	VisitGetTopicByIDResponse(w http.ResponseWriter) error
}

type GetTopicByID200JSONResponse Topic

func (response GetTopicByID200JSONResponse) VisitGetTopicByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTopicByID400TextResponse string

func (response GetTopicByID400TextResponse) VisitGetTopicByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type GetTopicByID404TextResponse string

func (response GetTopicByID404TextResponse) VisitGetTopicByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(404)

	_, err := w.Write([]byte(response))
	return err
}

type GetTopicByID500TextResponse string

func (response GetTopicByID500TextResponse) VisitGetTopicByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all topics
	// (GET /topics)
	ListTopics(ctx context.Context, request ListTopicsRequestObject) (ListTopicsResponseObject, error)
	// Create a new topic
	// (POST /topics)
	CreateTopic(ctx context.Context, request CreateTopicRequestObject) (CreateTopicResponseObject, error)
	// Delete topic by ID
	// (DELETE /topics/{id})
	DeleteTopicByID(ctx context.Context, request DeleteTopicByIDRequestObject) (DeleteTopicByIDResponseObject, error)
	// Get topic by ID
	// (GET /topics/{id})
	GetTopicByID(ctx context.Context, request GetTopicByIDRequestObject) (GetTopicByIDResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListTopics operation middleware
func (sh *strictHandler) ListTopics(w http.ResponseWriter, r *http.Request) {
	var request ListTopicsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTopics(ctx, request.(ListTopicsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTopics")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTopicsResponseObject); ok {
		if err := validResponse.VisitListTopicsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTopic operation middleware
func (sh *strictHandler) CreateTopic(w http.ResponseWriter, r *http.Request) {
	var request CreateTopicRequestObject

	var body CreateTopicJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTopic(ctx, request.(CreateTopicRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTopic")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTopicResponseObject); ok {
		if err := validResponse.VisitCreateTopicResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTopicByID operation middleware
func (sh *strictHandler) DeleteTopicByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteTopicByIDRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTopicByID(ctx, request.(DeleteTopicByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTopicByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTopicByIDResponseObject); ok {
		if err := validResponse.VisitDeleteTopicByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTopicByID operation middleware
func (sh *strictHandler) GetTopicByID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetTopicByIDRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTopicByID(ctx, request.(GetTopicByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTopicByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTopicByIDResponseObject); ok {
		if err := validResponse.VisitGetTopicByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXf2/bNhD9KgduQFtAjuVUzlr9l8ZeZiBwgtRpgQ1BQIunmK1EquTJqRH4uw+k/EuR",
	"UidDChT7KwZFHt+9e++OuWeJzgutUJFl8T2zyQxz7n+eGOSEE13I5BK/lWjJrXIhJEmteHZhdIGGJFoW",
	"pzyzGLBiZ+meKZ6j+yvQJkYW7hSL2Zjn2CVJGYJOgWYI5K4A0pD4G1nA8DvPiwzdbryDlCfUSWaYfJXq",
	"ttrNApZLdYbqlmYs7gWMFoXbbslIdcuWy4AZ/FZKg4LF/1RIrje79PQLJsSWAfPZOYx15BUQccOpif/z",
	"DNUO7DtuV7hFDfhheBh1wl6n15/0wvhtGIfh3yxgqTa5i8oEJ+yQzF26D8AHTIrmvVdKfisRpEBFMpVo",
	"INVmC6R2eb8f4rsoDDt4+H7aiXoi6vA/ekedKDo66vejKAzDcBdMWUrRhuNZFawhODn/NBp0eu9hzpNE",
	"KgRMU0xIzlGhtW13GbRl1sL3n7XqV7sg0YpQUe3KyUxaSDIuc5hxC1NEBXM0jisB3AJPktJwQphyiwK0",
	"ggLRdAzOJd6hAEulkGgPWMBUmWV86qKSKfFRsDeWOJW2ifmjX1+zk7Zk4JCrMnfinJxfjE5uLocfr84m",
	"N+Pz8ZAF9bXj8cfPw8vh4OH6yV/HZ2fD8elw4LS9Q8Qjh/dm9Vg6J6UxqAhsLa1N0Wt5XAzHg9H4dBfr",
	"+dmndojbvQ0oZSGe48CMW4LVmXYbHk16URz1f2TDPfw86CneMd4gG+KC3cbRbDcuglSpbmZ0fDHybq4r",
	"hRdFJhPu9wTMG27lhxO3BY4vRixgczS2itI7CA9CR54uUPFCspi9PQgP3rKAFZxmvrBdz5n/eYst3F4i",
	"GYlzBJ5lFb8WtBFoUMB0UXU6qRU43uC1wju0BKk0lt4wf7Hx30eCxexMWppU13nHFFrZqr8ehqFvsysX",
	"u7GyzbX7xToo61nkfknC3B/83WDKYvZbdzu1uquR1a16+XJDOzeGLyrW6zk6XF7EVXpmlbIAWyYJWpuW",
	"WbZwgfoNmITfqVtkXD4AuBWcRTNHA2iMNrGjibt24xqWcv1PK0i5zLCl3TaBjhShUTyD3aBeiLbMc24W",
	"62S2xXJh+a11Al0tXC8DVmjbUutqwAMH9eiQrRd050XAKjOgpQ9aLJ5VzB/VsOXNsawbz1lz2ZBT78UQ",
	"rFTULIb/sB71DalE/0EqUy5gRWIMpcLvBSYudtXWpIDX1ZIrCOYFLTZf3sTwyuocO1K8eoqQPmxvgg7M",
	"eSZFZeOVol5U6lXMF5J3TaNrVTYUvgzWja17L8WyknqG1PJ4Gfh14GALTGTqH56O1OkCJFkYDRqqr074",
	"8n9Y+O8FNzxHQuNQ3LfqZDSA11dXo4Hrio5B34HXAyOuhkdd1EErxy/zklte723A+8utvz6lqFX6Ffs/",
	"wSaVD6R4vuql8rp3Ff6F9b6S50aTXm8tHX3P8H66uk+R/u/S/mnD4PGXwy+j8yiMng1EaYJUl0rE8MQa",
	"PbErbAL/yg48RdpnP3/AR2hzyQDnmOki9/8x+V0sYKXJWMxmREXc7WY64dlMW4rfhe9Ctrxe/hsAAP//",
	"ZZfD7ocRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
