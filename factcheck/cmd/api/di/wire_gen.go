// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kaogeek/line-fact-check/factcheck/cmd/api/internal/handler"
	"github.com/kaogeek/line-fact-check/factcheck/cmd/api/internal/server"
	"github.com/kaogeek/line-fact-check/factcheck/internal/config"
	"github.com/kaogeek/line-fact-check/factcheck/internal/core"
	"github.com/kaogeek/line-fact-check/factcheck/internal/data/postgres"
	"github.com/kaogeek/line-fact-check/factcheck/internal/di"
	"github.com/kaogeek/line-fact-check/factcheck/internal/repo"
)

// Injectors from inject.go:

// InitializeServer returns our HTTP API server.
func InitializeServer() (server.Server, func(), error) {
	configConfig, err := config.New()
	if err != nil {
		return nil, nil, err
	}
	pool, cleanup, err := postgres.NewConn(configConfig)
	if err != nil {
		return nil, nil, err
	}
	queries := postgres.New(pool)
	repository := repo.New(queries, pool)
	handlerHandler := handler.New(repository)
	httpServer, cleanup2 := server.New(configConfig, handlerHandler)
	return httpServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

// InitializeContainer returns all components of interest,
// perfect for integration test or debugging
func InitializeContainer() (Container, func(), error) {
	configConfig, err := config.New()
	if err != nil {
		return Container{}, nil, err
	}
	pool, cleanup, err := postgres.NewConn(configConfig)
	if err != nil {
		return Container{}, nil, err
	}
	queries := postgres.New(pool)
	repository := repo.New(queries, pool)
	serviceFactcheck := core.New(repository)
	container := di.Container{
		Config:          configConfig,
		PostgresConn:    pool,
		PostgresQuerier: queries,
		Repository:      repository,
		Service:         serviceFactcheck,
	}
	handlerHandler := handler.New(repository)
	httpServer, cleanup2 := server.New(configConfig, handlerHandler)
	diContainer := Container{
		Container: container,
		Handler:   handlerHandler,
		Server:    httpServer,
	}
	return diContainer, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InitializeContainerTest() (Container, func(), error) {
	configConfig, err := config.NewTest()
	if err != nil {
		return Container{}, nil, err
	}
	pool, cleanup, err := postgres.NewConn(configConfig)
	if err != nil {
		return Container{}, nil, err
	}
	queries := postgres.New(pool)
	repository := repo.New(queries, pool)
	serviceFactcheck := core.New(repository)
	container, cleanup2 := di.NewTest(configConfig, pool, queries, repository, serviceFactcheck)
	handlerHandler := handler.New(repository)
	httpServer, cleanup3 := server.New(configConfig, handlerHandler)
	diContainer := Container{
		Container: container,
		Handler:   handlerHandler,
		Server:    httpServer,
	}
	return diContainer, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
