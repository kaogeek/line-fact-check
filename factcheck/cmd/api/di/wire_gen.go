// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kaogeek/line-fact-check/factcheck/cmd/api/config"
	"github.com/kaogeek/line-fact-check/factcheck/cmd/api/internal/handler"
	"github.com/kaogeek/line-fact-check/factcheck/cmd/api/internal/server"
	"github.com/kaogeek/line-fact-check/factcheck/data/postgres"
	"github.com/kaogeek/line-fact-check/factcheck/internal/repo"
)

// Injectors from inject.go:

// InitializeServer returns our HTTP API server.
func InitializeServer() (server.Server, func(), error) {
	configConfig, err := config.New()
	if err != nil {
		return nil, nil, err
	}
	conn, cleanup, err := postgres.NewConn(configConfig)
	if err != nil {
		return nil, nil, err
	}
	queries := postgres.New(conn)
	repository := repo.New(queries, conn)
	handlerHandler := handler.New(repository)
	httpServer := server.New(configConfig, handlerHandler)
	return httpServer, func() {
		cleanup()
	}, nil
}

// InitializeContainer returns all components of interest,
// perfect for integration test or debugging
func InitializeContainer() (Container, func(), error) {
	configConfig, err := config.New()
	if err != nil {
		return Container{}, nil, err
	}
	conn, cleanup, err := postgres.NewConn(configConfig)
	if err != nil {
		return Container{}, nil, err
	}
	queries := postgres.New(conn)
	repository := repo.New(queries, conn)
	handlerHandler := handler.New(repository)
	httpServer := server.New(configConfig, handlerHandler)
	container := New(configConfig, conn, queries, repository, handlerHandler, httpServer)
	return container, func() {
		cleanup()
	}, nil
}

func InitializeContainerTest() (ContainerTest, func(), error) {
	configConfig, err := config.NewTest()
	if err != nil {
		return ContainerTest{}, nil, err
	}
	conn, cleanup, err := postgres.NewConn(configConfig)
	if err != nil {
		return ContainerTest{}, nil, err
	}
	queries := postgres.New(conn)
	repository := repo.New(queries, conn)
	handlerHandler := handler.New(repository)
	httpServer := server.New(configConfig, handlerHandler)
	containerTest, cleanup2 := NewTest(configConfig, conn, queries, repository, handlerHandler, httpServer)
	return containerTest, func() {
		cleanup2()
		cleanup()
	}, nil
}
