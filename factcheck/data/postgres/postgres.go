// Package postgres is where code generated by sqlc lives.
// It also provides Postgres connection via NewConn.
package postgres

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/jackc/pgx/v5"

	"github.com/kaogeek/line-fact-check/factcheck/cmd/api/config"
)

type Tx pgx.Tx
type IsoLevel pgx.TxIsoLevel

const (
	IsoLevelReadCommitted  IsoLevel = IsoLevel(pgx.ReadCommitted)
	IsoLevelRepeatableRead IsoLevel = IsoLevel(pgx.RepeatableRead)
	IsoLevelSerializable   IsoLevel = IsoLevel(pgx.Serializable)
)

type TxnManager struct {
	c *pgx.Conn
}

func (t TxnManager) Begin(ctx context.Context) (Tx, error) {
	return t.c.Begin(ctx)
}

func (t TxnManager) BeginTx(ctx context.Context, level IsoLevel) (Tx, error) {
	return t.c.BeginTx(ctx, pgx.TxOptions{
		IsoLevel: pgx.TxIsoLevel(level),
	})
}

func NewTxnManager(conn *pgx.Conn) TxnManager {
	return TxnManager{c: conn}
}

func NewConn(c config.Config) (*pgx.Conn, func(), error) {
	slog.Info("connecting to postgres",
		"host", c.Postgres.Host,
		"port", c.Postgres.Port,
		"user", c.Postgres.User,
		"dbname", c.Postgres.DBName,
	)
	conn, err := pgx.Connect(
		context.Background(),
		fmt.Sprintf(
			"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
			c.Postgres.Host, c.Postgres.Port, c.Postgres.User, c.Postgres.Password, c.Postgres.DBName,
		),
	)
	if err != nil {
		return nil, nil, err
	}

	slog.Info("postgres connected",
		"host", c.Postgres.Host,
		"port", c.Postgres.Port,
		"user", c.Postgres.User,
		"dbname", c.Postgres.DBName,
	)

	cleanup := func() {
		defer slog.Info("postgres conn closed or cleaned up")
		if conn == nil {
			slog.Warn("postgres conn is nil")
			return
		}
		err := conn.Close(context.Background())
		if err != nil {
			slog.Error("error closing postgres conn", "error", err)
		}
	}

	return conn, cleanup, nil
}
