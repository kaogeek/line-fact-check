// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignMessageToTopic = `-- name: AssignMessageToTopic :one
UPDATE messages SET 
    topic_id = $2,
    updated_at = NOW()
WHERE id = $1 RETURNING id, topic_id, text, type, created_at, updated_at
`

type AssignMessageToTopicParams struct {
	ID      pgtype.UUID `json:"id"`
	TopicID pgtype.UUID `json:"topic_id"`
}

func (q *Queries) AssignMessageToTopic(ctx context.Context, arg AssignMessageToTopicParams) (Message, error) {
	row := q.db.QueryRow(ctx, assignMessageToTopic, arg.ID, arg.TopicID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.Text,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countTopicsByStatus = `-- name: CountTopicsByStatus :one
SELECT COUNT(*) FROM topics WHERE status = $1
`

func (q *Queries) CountTopicsByStatus(ctx context.Context, status string) (int64, error) {
	row := q.db.QueryRow(ctx, countTopicsByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTopicsGroupByStatusLikeID = `-- name: CountTopicsGroupByStatusLikeID :many
SELECT status, COUNT(*) as count 
FROM topics t 
WHERE t.id::text LIKE $1::text 
GROUP BY status
`

type CountTopicsGroupByStatusLikeIDRow struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

func (q *Queries) CountTopicsGroupByStatusLikeID(ctx context.Context, dollar_1 string) ([]CountTopicsGroupByStatusLikeIDRow, error) {
	rows, err := q.db.Query(ctx, countTopicsGroupByStatusLikeID, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountTopicsGroupByStatusLikeIDRow
	for rows.Next() {
		var i CountTopicsGroupByStatusLikeIDRow
		if err := rows.Scan(&i.Status, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countTopicsGroupByStatusLikeIDLikeMessageText = `-- name: CountTopicsGroupByStatusLikeIDLikeMessageText :many
SELECT t.status, COUNT(DISTINCT t.id) as count 
FROM topics t 
INNER JOIN messages m ON t.id = m.topic_id 
WHERE t.id::text LIKE $1::text AND m.text ILIKE $2 
GROUP BY t.status
`

type CountTopicsGroupByStatusLikeIDLikeMessageTextParams struct {
	Column1 string `json:"column_1"`
	Text    string `json:"text"`
}

type CountTopicsGroupByStatusLikeIDLikeMessageTextRow struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

func (q *Queries) CountTopicsGroupByStatusLikeIDLikeMessageText(ctx context.Context, arg CountTopicsGroupByStatusLikeIDLikeMessageTextParams) ([]CountTopicsGroupByStatusLikeIDLikeMessageTextRow, error) {
	rows, err := q.db.Query(ctx, countTopicsGroupByStatusLikeIDLikeMessageText, arg.Column1, arg.Text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountTopicsGroupByStatusLikeIDLikeMessageTextRow
	for rows.Next() {
		var i CountTopicsGroupByStatusLikeIDLikeMessageTextRow
		if err := rows.Scan(&i.Status, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countTopicsGroupByStatusLikeMessageText = `-- name: CountTopicsGroupByStatusLikeMessageText :many
SELECT t.status, COUNT(DISTINCT t.id) as count 
FROM topics t 
INNER JOIN messages m ON t.id = m.topic_id 
WHERE m.text ILIKE $1 
GROUP BY t.status
`

type CountTopicsGroupByStatusLikeMessageTextRow struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

func (q *Queries) CountTopicsGroupByStatusLikeMessageText(ctx context.Context, text string) ([]CountTopicsGroupByStatusLikeMessageTextRow, error) {
	rows, err := q.db.Query(ctx, countTopicsGroupByStatusLikeMessageText, text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountTopicsGroupByStatusLikeMessageTextRow
	for rows.Next() {
		var i CountTopicsGroupByStatusLikeMessageTextRow
		if err := rows.Scan(&i.Status, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countTopicsGroupedByStatus = `-- name: CountTopicsGroupedByStatus :many
SELECT status, COUNT(*) as count 
FROM topics 
GROUP BY status
`

type CountTopicsGroupedByStatusRow struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

func (q *Queries) CountTopicsGroupedByStatus(ctx context.Context) ([]CountTopicsGroupedByStatusRow, error) {
	rows, err := q.db.Query(ctx, countTopicsGroupedByStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountTopicsGroupedByStatusRow
	for rows.Next() {
		var i CountTopicsGroupedByStatusRow
		if err := rows.Scan(&i.Status, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    id, topic_id, text, type, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, topic_id, text, type, created_at, updated_at
`

type CreateMessageParams struct {
	ID        pgtype.UUID        `json:"id"`
	TopicID   pgtype.UUID        `json:"topic_id"`
	Text      string             `json:"text"`
	Type      string             `json:"type"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.ID,
		arg.TopicID,
		arg.Text,
		arg.Type,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.Text,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTopic = `-- name: CreateTopic :one
INSERT INTO topics (
    id, name, description, status, result, result_status, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, name, description, status, result, result_status, created_at, updated_at
`

type CreateTopicParams struct {
	ID           pgtype.UUID        `json:"id"`
	Name         string             `json:"name"`
	Description  string             `json:"description"`
	Status       string             `json:"status"`
	Result       pgtype.Text        `json:"result"`
	ResultStatus pgtype.Text        `json:"result_status"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateTopic(ctx context.Context, arg CreateTopicParams) (Topic, error) {
	row := q.db.QueryRow(ctx, createTopic,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.Result,
		arg.ResultStatus,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Result,
		&i.ResultStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserMessage = `-- name: CreateUserMessage :one
INSERT INTO user_messages (
    id, replied_at, message_id, metadata, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, replied_at, message_id, metadata, created_at, updated_at
`

type CreateUserMessageParams struct {
	ID        pgtype.UUID        `json:"id"`
	RepliedAt pgtype.Timestamptz `json:"replied_at"`
	MessageID pgtype.UUID        `json:"message_id"`
	Metadata  []byte             `json:"metadata"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUserMessage(ctx context.Context, arg CreateUserMessageParams) (UserMessage, error) {
	row := q.db.QueryRow(ctx, createUserMessage,
		arg.ID,
		arg.RepliedAt,
		arg.MessageID,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UserMessage
	err := row.Scan(
		&i.ID,
		&i.RepliedAt,
		&i.MessageID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const deleteTopic = `-- name: DeleteTopic :exec
DELETE FROM topics WHERE id = $1
`

func (q *Queries) DeleteTopic(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTopic, id)
	return err
}

const deleteUserMessage = `-- name: DeleteUserMessage :exec
DELETE FROM user_messages WHERE id = $1
`

func (q *Queries) DeleteUserMessage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, topic_id, text, type, created_at, updated_at FROM messages WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id pgtype.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.Text,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTopic = `-- name: GetTopic :one
SELECT id, name, description, status, result, result_status, created_at, updated_at FROM topics WHERE id = $1
`

func (q *Queries) GetTopic(ctx context.Context, id pgtype.UUID) (Topic, error) {
	row := q.db.QueryRow(ctx, getTopic, id)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Result,
		&i.ResultStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserMessage = `-- name: GetUserMessage :one
SELECT id, replied_at, message_id, metadata, created_at, updated_at FROM user_messages WHERE id = $1
`

func (q *Queries) GetUserMessage(ctx context.Context, id pgtype.UUID) (UserMessage, error) {
	row := q.db.QueryRow(ctx, getUserMessage, id)
	var i UserMessage
	err := row.Scan(
		&i.ID,
		&i.RepliedAt,
		&i.MessageID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMessagesByTopic = `-- name: ListMessagesByTopic :many
SELECT id, topic_id, text, type, created_at, updated_at FROM messages WHERE topic_id = $1 ORDER BY created_at ASC
`

func (q *Queries) ListMessagesByTopic(ctx context.Context, topicID pgtype.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, listMessagesByTopic, topicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.TopicID,
			&i.Text,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopics = `-- name: ListTopics :many
SELECT id, name, description, status, result, result_status, created_at, updated_at FROM topics ORDER BY created_at DESC
`

func (q *Queries) ListTopics(ctx context.Context) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsByStatus = `-- name: ListTopicsByStatus :many
SELECT id, name, description, status, result, result_status, created_at, updated_at FROM topics WHERE status = $1 ORDER BY created_at DESC
`

func (q *Queries) ListTopicsByStatus(ctx context.Context, status string) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsByStatusLikeID = `-- name: ListTopicsByStatusLikeID :many
SELECT id, name, description, status, result, result_status, created_at, updated_at FROM topics t 
WHERE t.status = $1 AND t.id::text LIKE $2::text 
ORDER BY t.created_at DESC
`

type ListTopicsByStatusLikeIDParams struct {
	Status  string `json:"status"`
	Column2 string `json:"column_2"`
}

func (q *Queries) ListTopicsByStatusLikeID(ctx context.Context, arg ListTopicsByStatusLikeIDParams) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsByStatusLikeID, arg.Status, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsByStatusLikeIDLikeMessageText = `-- name: ListTopicsByStatusLikeIDLikeMessageText :many
SELECT DISTINCT t.id, t.name, t.description, t.status, t.result, t.result_status, t.created_at, t.updated_at FROM topics t 
INNER JOIN messages m ON t.id = m.topic_id 
WHERE t.status = $1 AND t.id::text LIKE $2::text AND m.text ILIKE $3 
ORDER BY t.created_at DESC
`

type ListTopicsByStatusLikeIDLikeMessageTextParams struct {
	Status  string `json:"status"`
	Column2 string `json:"column_2"`
	Text    string `json:"text"`
}

func (q *Queries) ListTopicsByStatusLikeIDLikeMessageText(ctx context.Context, arg ListTopicsByStatusLikeIDLikeMessageTextParams) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsByStatusLikeIDLikeMessageText, arg.Status, arg.Column2, arg.Text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsByStatusLikeMessageText = `-- name: ListTopicsByStatusLikeMessageText :many
SELECT DISTINCT t.id, t.name, t.description, t.status, t.result, t.result_status, t.created_at, t.updated_at FROM topics t 
INNER JOIN messages m ON t.id = m.topic_id 
WHERE t.status = $1 AND m.text ILIKE $2 
ORDER BY t.created_at DESC
`

type ListTopicsByStatusLikeMessageTextParams struct {
	Status string `json:"status"`
	Text   string `json:"text"`
}

func (q *Queries) ListTopicsByStatusLikeMessageText(ctx context.Context, arg ListTopicsByStatusLikeMessageTextParams) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsByStatusLikeMessageText, arg.Status, arg.Text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsInIDs = `-- name: ListTopicsInIDs :many
SELECT DISTINCT t.id, t.name, t.description, t.status, t.result, t.result_status, t.created_at, t.updated_at FROM topics t 
WHERE t.id = ANY($1::uuid[]) 
ORDER BY t.created_at DESC
`

func (q *Queries) ListTopicsInIDs(ctx context.Context, dollar_1 []pgtype.UUID) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsInIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsInIDsLikeMessageText = `-- name: ListTopicsInIDsLikeMessageText :many
SELECT DISTINCT t.id, t.name, t.description, t.status, t.result, t.result_status, t.created_at, t.updated_at FROM topics t 
INNER JOIN messages m ON t.id = m.topic_id 
WHERE t.id = ANY($1::uuid[]) AND m.text ILIKE $2 
ORDER BY t.created_at DESC
`

type ListTopicsInIDsLikeMessageTextParams struct {
	Column1 []pgtype.UUID `json:"column_1"`
	Text    string        `json:"text"`
}

func (q *Queries) ListTopicsInIDsLikeMessageText(ctx context.Context, arg ListTopicsInIDsLikeMessageTextParams) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsInIDsLikeMessageText, arg.Column1, arg.Text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsLikeID = `-- name: ListTopicsLikeID :many
SELECT id, name, description, status, result, result_status, created_at, updated_at FROM topics t 
WHERE t.id::text LIKE $1::text 
ORDER BY t.created_at DESC
`

func (q *Queries) ListTopicsLikeID(ctx context.Context, dollar_1 string) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsLikeID, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsLikeIDLikeMessageText = `-- name: ListTopicsLikeIDLikeMessageText :many
SELECT DISTINCT t.id, t.name, t.description, t.status, t.result, t.result_status, t.created_at, t.updated_at FROM topics t 
INNER JOIN messages m ON t.id = m.topic_id 
WHERE t.id::text LIKE $1::text AND m.text ILIKE $2 
ORDER BY t.created_at DESC
`

type ListTopicsLikeIDLikeMessageTextParams struct {
	Column1 string `json:"column_1"`
	Text    string `json:"text"`
}

func (q *Queries) ListTopicsLikeIDLikeMessageText(ctx context.Context, arg ListTopicsLikeIDLikeMessageTextParams) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsLikeIDLikeMessageText, arg.Column1, arg.Text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopicsLikeMessageText = `-- name: ListTopicsLikeMessageText :many
SELECT DISTINCT t.id, t.name, t.description, t.status, t.result, t.result_status, t.created_at, t.updated_at FROM topics t 
INNER JOIN messages m ON t.id = m.topic_id 
WHERE m.text ILIKE $1 
ORDER BY t.created_at DESC
`

func (q *Queries) ListTopicsLikeMessageText(ctx context.Context, text string) ([]Topic, error) {
	rows, err := q.db.Query(ctx, listTopicsLikeMessageText, text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.Result,
			&i.ResultStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages SET 
    text = $2,
    type = $3,
    updated_at = $4
WHERE id = $1 RETURNING id, topic_id, text, type, created_at, updated_at
`

type UpdateMessageParams struct {
	ID        pgtype.UUID        `json:"id"`
	Text      string             `json:"text"`
	Type      string             `json:"type"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessage,
		arg.ID,
		arg.Text,
		arg.Type,
		arg.UpdatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.TopicID,
		&i.Text,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTopicDescription = `-- name: UpdateTopicDescription :one
UPDATE topics SET 
    description = $2,
    updated_at = NOW()
WHERE id = $1 RETURNING id, name, description, status, result, result_status, created_at, updated_at
`

type UpdateTopicDescriptionParams struct {
	ID          pgtype.UUID `json:"id"`
	Description string      `json:"description"`
}

func (q *Queries) UpdateTopicDescription(ctx context.Context, arg UpdateTopicDescriptionParams) (Topic, error) {
	row := q.db.QueryRow(ctx, updateTopicDescription, arg.ID, arg.Description)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Result,
		&i.ResultStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTopicName = `-- name: UpdateTopicName :one
UPDATE topics SET 
    name = $2,
    updated_at = NOW()
WHERE id = $1 RETURNING id, name, description, status, result, result_status, created_at, updated_at
`

type UpdateTopicNameParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateTopicName(ctx context.Context, arg UpdateTopicNameParams) (Topic, error) {
	row := q.db.QueryRow(ctx, updateTopicName, arg.ID, arg.Name)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Result,
		&i.ResultStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTopicStatus = `-- name: UpdateTopicStatus :one
UPDATE topics SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1 RETURNING id, name, description, status, result, result_status, created_at, updated_at
`

type UpdateTopicStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status string      `json:"status"`
}

func (q *Queries) UpdateTopicStatus(ctx context.Context, arg UpdateTopicStatusParams) (Topic, error) {
	row := q.db.QueryRow(ctx, updateTopicStatus, arg.ID, arg.Status)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.Result,
		&i.ResultStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserMessage = `-- name: UpdateUserMessage :one
UPDATE user_messages SET 
    replied_at = $2,
    metadata = $3,
    updated_at = $4
WHERE id = $1 RETURNING id, replied_at, message_id, metadata, created_at, updated_at
`

type UpdateUserMessageParams struct {
	ID        pgtype.UUID        `json:"id"`
	RepliedAt pgtype.Timestamptz `json:"replied_at"`
	Metadata  []byte             `json:"metadata"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateUserMessage(ctx context.Context, arg UpdateUserMessageParams) (UserMessage, error) {
	row := q.db.QueryRow(ctx, updateUserMessage,
		arg.ID,
		arg.RepliedAt,
		arg.Metadata,
		arg.UpdatedAt,
	)
	var i UserMessage
	err := row.Scan(
		&i.ID,
		&i.RepliedAt,
		&i.MessageID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
