// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	AssignMessageGroupToTopic(ctx context.Context, arg AssignMessageGroupToTopicParams) (MessageGroup, error)
	AssignMessageV2ToMessageGroup(ctx context.Context, arg AssignMessageV2ToMessageGroupParams) (MessagesV2, error)
	AssignMessageV2ToTopic(ctx context.Context, arg AssignMessageV2ToTopicParams) (MessagesV2, error)
	CountTopicsByStatus(ctx context.Context, status string) (int64, error)
	CountTopicsGroupByStatusDynamicV2(ctx context.Context, arg CountTopicsGroupByStatusDynamicV2Params) ([]CountTopicsGroupByStatusDynamicV2Row, error)
	CountTopicsGroupedByStatus(ctx context.Context) ([]CountTopicsGroupedByStatusRow, error)
	CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error)
	CreateMessageGroup(ctx context.Context, arg CreateMessageGroupParams) (MessageGroup, error)
	CreateMessageV2(ctx context.Context, arg CreateMessageV2Params) (MessagesV2, error)
	CreateTopic(ctx context.Context, arg CreateTopicParams) (Topic, error)
	DeleteAnswer(ctx context.Context, id pgtype.UUID) error
	DeleteMessageGroup(ctx context.Context, id pgtype.UUID) error
	DeleteMessageV2(ctx context.Context, id pgtype.UUID) error
	DeleteTopic(ctx context.Context, id pgtype.UUID) error
	GetAnswerByID(ctx context.Context, id pgtype.UUID) (Answer, error)
	GetAnswerByTopicID(ctx context.Context, topicID pgtype.UUID) (Answer, error)
	GetMessageGroup(ctx context.Context, id pgtype.UUID) (MessageGroup, error)
	GetMessageGroupBySHA1(ctx context.Context, textSha1 string) (MessageGroup, error)
	GetMessageV2(ctx context.Context, id pgtype.UUID) (MessagesV2, error)
	GetTopic(ctx context.Context, id pgtype.UUID) (Topic, error)
	GetTopicStatus(ctx context.Context, id pgtype.UUID) (string, error)
	ListAnswersByTopicID(ctx context.Context, topicID pgtype.UUID) ([]Answer, error)
	ListMessageGroupsByTopic(ctx context.Context, topicID pgtype.UUID) ([]MessageGroup, error)
	ListMessagesV2ByGroup(ctx context.Context, groupID pgtype.UUID) ([]MessagesV2, error)
	ListMessagesV2ByTopic(ctx context.Context, topicID pgtype.UUID) ([]MessagesV2, error)
	ListTopics(ctx context.Context, arg ListTopicsParams) ([]ListTopicsRow, error)
	ListTopicsByStatus(ctx context.Context, arg ListTopicsByStatusParams) ([]ListTopicsByStatusRow, error)
	ListTopicsDynamicV2(ctx context.Context, arg ListTopicsDynamicV2Params) ([]Topic, error)
	ListTopicsInIDs(ctx context.Context, dollar_1 []pgtype.UUID) ([]Topic, error)
	ListTopicsLikeID(ctx context.Context, arg ListTopicsLikeIDParams) ([]ListTopicsLikeIDRow, error)
	ResolveTopic(ctx context.Context, arg ResolveTopicParams) (Topic, error)
	TopicExists(ctx context.Context, id pgtype.UUID) (bool, error)
	UnassignMessageGroupFromTopic(ctx context.Context, id pgtype.UUID) (MessageGroup, error)
	UnassignMessageV2FromTopic(ctx context.Context, id pgtype.UUID) (MessagesV2, error)
	UpdateMessageGroupName(ctx context.Context, arg UpdateMessageGroupNameParams) (MessageGroup, error)
	UpdateMessageGroupStatus(ctx context.Context, arg UpdateMessageGroupStatusParams) (MessageGroup, error)
	UpdateTopicDescription(ctx context.Context, arg UpdateTopicDescriptionParams) (Topic, error)
	UpdateTopicName(ctx context.Context, arg UpdateTopicNameParams) (Topic, error)
	UpdateTopicStatus(ctx context.Context, arg UpdateTopicStatusParams) (Topic, error)
}

var _ Querier = (*Queries)(nil)
