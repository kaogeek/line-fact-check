openapi: 3.0.3
info:
  title: FactCheck API
  description: API for fact-checking application
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /topics:
    get:
      summary: List all topics
      description: Retrieve all topics ordered by creation date (newest first)
      operationId: listTopics
      tags:
        - topics
      responses:
        "200":
          description: List of topics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "server error: database connection failed"
    
    post:
      summary: Create a new topic
      description: Create a new fact-checking topic
      operationId: createTopic
      tags:
        - topics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTopicRequest'
      responses:
        "201":
          description: Topic created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        "400":
          description: Bad request - validation error
          content:
            text/plain:
              schema:
                type: string
                example: "bad request: unexpected topic id (expecting empty topic id): 'some-id'"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "server error: database error"

  /topics/{id}:
    get:
      summary: Get topic by ID
      description: Retrieve a specific topic by its ID
      operationId: getTopicByID
      tags:
        - topics
      parameters:
        - name: id
          in: path
          required: true
          description: Topic ID (UUID)
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Topic retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        "400":
          description: Bad request - invalid ID
          content:
            text/plain:
              schema:
                type: string
                example: "bad request: empty id"
        "404":
          description: Topic not found
          content:
            text/plain:
              schema:
                type: string
                example: "not found: 550e8400-e29b-41d4-a716-446655440000"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "server error: database error"
    
    delete:
      summary: Delete topic by ID
      description: Delete a specific topic by its ID
      operationId: deleteTopicByID
      tags:
        - topics
      parameters:
        - name: id
          in: path
          required: true
          description: Topic ID (UUID)
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Topic deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: "ok"
        "400":
          description: Bad request - invalid ID
          content:
            text/plain:
              schema:
                type: string
                example: "bad request: empty id"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "server error: database error"

components:
  schemas:
    Topic:
      type: object
      required:
        - id
        - name
        - status
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the topic
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          description: Name/title of the topic
          example: "COVID-19 vaccine effectiveness"
        status:
          type: string
          enum: [TOPIC_PENDING, TOPIC_RESOLVED]
          description: Current status of the topic
          example: "TOPIC_PENDING"
        result:
          type: string
          nullable: true
          description: Fact-checking result content
          example: "This claim has been verified as accurate based on peer-reviewed studies."
        result_status:
          type: string
          enum: [TOPIC_RESULT_NONE, TOPIC_RESULT_ANSWERED, TOPIC_RESULT_CHALLENGED]
          nullable: true
          description: Status of the fact-checking result
          example: "TOPIC_RESULT_ANSWERED"
        created_at:
          type: string
          format: date-time
          description: When the topic was created
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: When the topic was last updated
          example: "2024-01-16T14:45:00Z"

    CreateTopicRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name/title of the topic to create
          example: "New fact-checking topic"
          minLength: 1
      additionalProperties: false